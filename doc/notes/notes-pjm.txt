# ============================================================================
# 2013-04-07 (Sunday) 00:58 IST
# 
# Get beta click database and start writing analysis code for it.

cd analysis/workspace

wget http://spacewarps.org.s3.amazonaws.com/data-export/spacewarps-2013-04-06_20-07-28.tar.gz

tar xvfz spacewarps-2013-04-06_20-07-28.tar.gz

ls spacewarps-2013-04-06_20-07-28/ouroboros_staging/
# spacewarp_classifications.bson          spacewarp_subjects.bson
# spacewarp_classifications.metadata.json spacewarp_subjects.metadata.json

# These are files to be read into a mongoDB, using mongodbrestore.

# Needs pymongo... pip install? Yep - done
	
# Also need binary installation of mongodb, from mongodb.org
# Downloaded to software, linked to ~/bin

mongorestore spacewarps-2013-04-06_20-07-28
# Sun Apr  7 01:23:48.133 kern.sched unavailable
# couldn't connect to [127.0.0.1] couldn't connect to server 127.0.0.1:27017

# Hmm. Looks beyond my pay grade.
# Try from python:

cd spacewarps-2013-04-06_20-07-28/
python ../../swap/mongodb.py 

Traceback (most recent call last):
  File "../../swap/mongodb.py", line 23, in <module>
    m = MongoDB()
  File "../../swap/mongodb.py", line 13, in __init__
    self.client = MongoClient('localhost', 27017)
  File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pymongo/mongo_client.py", line 336, in __init__
    raise ConnectionFailure(str(e))
pymongo.errors.ConnectionFailure: could not connect to localhost:27017: [Errno 61] Connection refused

# Need to start mongodb server in the background:

mongod --dbpath . &

# Now python runs ok:

python ../../swap/mongodb.py 
# Collection(Database(MongoClient('localhost', 27017), u'ouroboros_staging'), u'spacewarp_subjects.0')
# Collection(Database(MongoClient('localhost', 27017), u'ouroboros_staging'), u'spacewarp_classifications.0')

# What are these things?!
# OK, open up python session and start playing.

>>> import swap
>>> m = swap.MongoDB()
>>> m.subjects
Collection(Database(MongoClient('localhost', 27017), u'ouroboros_staging'), u'spacewarp_subjects')
>>> m.subjects.find()
<pymongo.cursor.Cursor object at 0x101220f50>

# Interesting.

>>> m.subjects.find_one({'zooniverse_id' : 'ASW0000002'})
{u'project_id': ObjectId('5101a1341a320ea77f000001'), u'classification_count':
523, u'created_at': datetime.datetime(2013, 4, 4, 20, 29, 18, 949000),
u'random': 0.5465496445414518, u'updated_at': datetime.datetime(2013, 4, 4,
20, 29, 18, 975000), u'state': u'complete', u'trending': 3, u'coords': [],
u'location': {u'thumbnail': u'', u'standard': u''}, u'zooniverse_id':
u'ASW0000002', u'workflow_ids': [ObjectId('5101a1361a320ea77f000002')],
u'_id': ObjectId('5101a1931a320ea77f000004'), u'tutorial': True, u'metadata':
{}}

# OK cool - here's a clue to the subject schema, and the metadata on subject
# ASW0000002.  

# How about a non-tutorial one?
>>> m.subjects.find_one({'zooniverse_id' : 'ASW0000004'})
{u'_id': ObjectId('515de29fe4bb216427000001'), u'classification_count': 13,
u'created_at': datetime.datetime(2013, 4, 4, 20, 29, 19, 372000),
u'activated_at': datetime.datetime(2013, 4, 4, 20, 32, 51, 886000),
u'updated_at': datetime.datetime(2013, 4, 4, 20, 29, 19, 398000), u'random':
0.1047423015104475, u'project_id': ObjectId('5101a1341a320ea77f000001'),
u'state': u'active', u'zooniverse_id': u'ASW0000004', u'workflow_ids':
[ObjectId('5101a1361a320ea77f000002')], u'location': {u'thumbnail':
u'http://www.spacewarps.org/subjects/thumbnail/CFHTLS_002_0530_gri.png',
u'standard':
u'http://www.spacewarps.org/subjects/standard/CFHTLS_002_0530_gri.png'},
u'group_id': ObjectId('5154a3783ae74086ab000001'), u'metadata': {u'id':
u'CFHTLS_002_0530'}}

# Nice! There's the actual image name, from Anu. And this URL is open - 
# volunteers can grab those any time if they want to model them elsewhere.
# Just need to expose that on the site somewhere. 

# Anyway, what about classifications?

>>> m.classifications.find_one()
{u'_id': ObjectId('515de3a9390c056085000416'), u'created_at':
datetime.datetime(2013, 4, 4, 20, 33, 45), u'updated_at':
datetime.datetime(2013, 4, 4, 20, 33, 45, 885000), u'user_ip':
u'163.1.174.106', u'workflow_id': ObjectId('5101a1361a320ea77f000002'),
u'subjects': [], u'subject_ids': [ObjectId('515dd45de4bb21597c00026c')],
u'project_id': ObjectId('5101a1341a320ea77f000001'), u'annotations':
[{u'finished_at': u'Thu, 04 Apr 2013 20:32:19 GMT', u'started_at': u'Thu, 04
Apr 2013 19:57:45 GMT'}, {u'user_agent': u'Mozilla/5.0 (Macintosh; Intel Mac
OS X 10_7_5) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43
Safari/537.31'}]}

>>> m.classifications.find({'_id':'515de3a9390c056085000416'})
# <pymongo.cursor.Cursor object at 0x10122c050>

# Hmm. A cursor seems to be some sort of cursor. Might need a bit of help
# learning how this works!

# Plan:
# 
# Make a list of operations that I want to do, 
# and ask for a suggested example command from Amit?
# 
# 1) Return a list of users as an array of strings
# 
# 2) For a given user, return the IDs of all the training subjects they classified
#     Presumably this array will be time-ordered?
# 
# 3) For a given user and training subject ID, return the value 1 if they succeeded in recognising it, 0 if not

# Issued.


# 2013-04-18 (Thursday) 12:04 BST
# 
# datetime objects are interesting! See http://docs.python.org/2/library/datetime.html
# 
# >>> import datetime
# >>> print datetime.datetime(2013, 4, 4, 20, 29, 18, 949000)
# 2013-04-04 20:29:18.949000
# >>> t1 = datetime.datetime(2013, 4, 4, 20, 29, 18, 949000)
# >>> t2 = datetime.datetime(2013, 4, 5, 8, 15, 23, 543000)
# >>> t2 - t1
# datetime.timedelta(0, 42364, 594000)
# >>> t1 > t2
# False
# >>> t1 <= t2
# True

# Perfect!

# ============================================================================
# 2013-04-22 (Monday) 23:24 BST

# Getting data out of mongodb is not so intuitive. Wrapped it up in
# python so that I can just do, eg

cd workspace
python ../swap/mongodb.py

# But I cannot do even the most basic things - so Ive written down what
# I want to do in plausible python, for Amit to advise on!

# ============================================================================
# 2013-04-24 (Wednesday) 10:18 BST
# 
# Great session with Amit yesterday solving all my db access problems!
# He says that on the Zooniverse system, the correct db is always online,
# so we should just connect to the client. That means that all of this
# wrapper I wrote is redundant - but I preserve it here, for reference:

#     self.dumpname = dumpname
#            
#     # Keep a record of what goes on:
#     self.logfilename = os.getcwd()+'/'+self.dumpname+'.log'
#     self.logfile = open(self.logfilename,"w")
#     
#     # Start the Mongo server in the background:
#     subprocess.call(["mongorestore",self.dumpname],stdout=self.logfile,stderr=self.logfile)
#     os.chdir(self.dumpname)
#     self.cleanup()
#     self.process = subprocess.Popen(["mongod","--dbpath","."],stdout=self.logfile,stderr=self.logfile)
#     
#     # Check everything is working:
#     if self.process.poll() == None: print "MongoDB: server is up and running"
# 
#     # Connect to the Mongo:
#     self.client = MongoClient('localhost', 27017)
#     self.db = self.client['ouroboros_staging']
# 
#     self.subjects = self.db['spacewarp_subjects']
#     self.classifications = self.db['spacewarp_classifications']

# Followed by, later,
#     m.terminate()

# Worked example gives the following result, from the initial beta DB:

# Counted  7564  classifications, that each look like:
# ('2013-04-06 19:54:42.146000', '5065ff08d10d244cd10029ba', '515de2efe4bb21642700019a', 'test', 'NOT')

# ============================================================================
# 2013-04-29 (Monday) 17:03 BST

# OK, got SWAP working in its simplest incarnation.
# REady to do some experiments!

# Standard setup is this on: agents learn, but set PD=PL=50%, initially.
SWAP.py CFHTLS-beta_P50.config

# Aprajita asks, do we have to learn? Why not assume one set of P's and 
# stick with them? Get off to a fsater start?
SWAP.py CFHTLS-beta_no-learning_P50.config
# Random classifiers get nowhere!

SWAP.py CFHTLS-beta_no-learning_P90.config
# Big jumps up and down in probability, lots of false positives.


# OK, so back to learning. How about we be less pessimistic about people's 
# talents? 
SWAP.py CFHTLS-beta_P90.config
# Not bad - Christmas tree is broader. FP rate higher, but got some sims in
# the detection zone now.

# More measured. Crowd divided between two groups? 
#    The Herd: PD = 0.9, PL = U(0:1)
# Enthusiasts: PD = U(0.2:0.6), PL = U(0.6:1.0) 
SWAP.py CFHTLS-beta_P70.config


# One issue with this LENS or NOT analysis is the hard edged estimation of PD
# and PL. Early classifications can have a significant impact... Hmm. 70-70
# seems like a reasonable starting point. 


# Wishlist for mock survey:

# - Detected/rejected subjects        -
# - Candidate URLs output             -
# - Retired/promoted subjects         -
# - Completeness, purity calculated   -
# - Difficulty variation              DONE
# - PD, PL capped at 0.99             -
